
bin\Debug\Interface_module_take2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  000002de  00000372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000012  00000000  00000000  000003ad  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000098  00000000  00000000  00000400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000010c8  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000de3  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   000006ca  00000000  00000000  00002343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000094  00000000  00000000  00002a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000005ab  00000000  00000000  00002aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 00000172  00000000  00000000  0000304f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 000001c3  00000000  00000000  000031c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000025  00000000  00000000  00003384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	ee ed       	ldi	r30, 0xDE	; 222

000000fc <.Loc.4>:
  fc:	f2 e0       	ldi	r31, 0x02	; 2

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a8 33       	cpi	r26, 0x38	; 56

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <L0^A>:
 10e:	0e 94 1b 01 	call	0x236	; 0x236 <main>
 112:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <init>:
};

void init (void)
{
	// Initialiseer de pinnen voor datain, shiftclk en latchclk als output
	DDR_SDI    |= (1 << SDI_BIT);
 11a:	e1 e0       	ldi	r30, 0x01	; 1
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	80 81       	ld	r24, Z

00000120 <.Loc.2>:
 120:	80 62       	ori	r24, 0x20	; 32
 122:	80 83       	st	Z, r24

00000124 <.Loc.3>:
	DDR_SFTCLK |= (1 << SFTCLK_BIT);
 124:	80 81       	ld	r24, Z

00000126 <.Loc.4>:
 126:	80 61       	ori	r24, 0x10	; 16
 128:	80 83       	st	Z, r24

0000012a <.Loc.5>:
	DDR_LCHCLK |= (1 << LCHCLK_BIT);
 12a:	9d 9a       	sbi	0x13, 5	; 19

0000012c <.Loc.7>:

	// Maak shiftclk en latchclk laag
	PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 12c:	e2 e0       	ldi	r30, 0x02	; 2
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	80 81       	ld	r24, Z
 132:	8f 7e       	andi	r24, 0xEF	; 239
 134:	80 83       	st	Z, r24

00000136 <.Loc.10>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 136:	a5 98       	cbi	0x14, 5	; 20

00000138 <.Loc.11>:
}
 138:	08 95       	ret

0000013a <send_data>:

void send_data(char data)
{
 13a:	28 e0       	ldi	r18, 0x08	; 8
 13c:	30 e0       	ldi	r19, 0x00	; 0

0000013e <.Loc.17>:
		{
			PORT_SDI |= (1 << SDI_BIT);
		}
		else
		{
			PORT_SDI &= ~(1 << SDI_BIT);
 13e:	e2 e0       	ldi	r30, 0x02	; 2
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	0e c0       	rjmp	.+28     	; 0x160 <.L5>

00000144 <.L3>:
 144:	90 81       	ld	r25, Z

00000146 <.Loc.20>:
 146:	9f 7d       	andi	r25, 0xDF	; 223
 148:	90 83       	st	Z, r25

0000014a <.L4>:
		}

		// Toggle shiftclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
		// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
		// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
		PORT_SFTCLK |= (1 << SFTCLK_BIT);
 14a:	90 81       	ld	r25, Z

0000014c <.Loc.22>:
 14c:	90 61       	ori	r25, 0x10	; 16
 14e:	90 83       	st	Z, r25

00000150 <.Loc.23>:
		PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 150:	90 81       	ld	r25, Z
 152:	9f 7e       	andi	r25, 0xEF	; 239
 154:	90 83       	st	Z, r25

00000156 <.Loc.25>:
	for (unsigned i = 0; i < 8; i++)
 156:	21 50       	subi	r18, 0x01	; 1
 158:	31 09       	sbc	r19, r1

0000015a <.Loc.27>:
 15a:	21 15       	cp	r18, r1
 15c:	31 05       	cpc	r19, r1
 15e:	49 f0       	breq	.+18     	; 0x172 <.L7>

00000160 <.L5>:
		int bit = data & 1;
 160:	98 2f       	mov	r25, r24
 162:	91 70       	andi	r25, 0x01	; 1

00000164 <.Loc.29>:
		data >>= 1;
 164:	85 95       	asr	r24

00000166 <.Loc.31>:
		if (bit)
 166:	99 23       	and	r25, r25
 168:	69 f3       	breq	.-38     	; 0x144 <.L3>

0000016a <.Loc.33>:
			PORT_SDI |= (1 << SDI_BIT);
 16a:	90 81       	ld	r25, Z

0000016c <.Loc.34>:
 16c:	90 62       	ori	r25, 0x20	; 32
 16e:	90 83       	st	Z, r25
 170:	ec cf       	rjmp	.-40     	; 0x14a <.L4>

00000172 <.L7>:
	}
}
 172:	08 95       	ret

00000174 <send_enable>:

void send_enable(int display_nummer)
{
	send_data(0x10 << display_nummer);
 174:	90 e1       	ldi	r25, 0x10	; 16
 176:	01 c0       	rjmp	.+2      	; 0x17a <.L2^B1>

00000178 <.L1^B1>:
 178:	99 0f       	add	r25, r25

0000017a <.L2^B1>:
 17a:	8a 95       	dec	r24
 17c:	ea f7       	brpl	.-6      	; 0x178 <.L1^B1>
 17e:	89 2f       	mov	r24, r25

00000180 <.Loc.39>:
 180:	0e 94 9d 00 	call	0x13a	; 0x13a <send_data>

00000184 <.LVL11>:
}
 184:	08 95       	ret

00000186 <display>:

void display(char data, int display_nummer)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	d6 2f       	mov	r29, r22
 18c:	c7 2f       	mov	r28, r23

0000018e <.Loc.43>:
	send_data(data);
 18e:	0e 94 9d 00 	call	0x13a	; 0x13a <send_data>

00000192 <.LVL13>:
	send_enable(display_nummer);
 192:	8d 2f       	mov	r24, r29
 194:	9c 2f       	mov	r25, r28
 196:	0e 94 ba 00 	call	0x174	; 0x174 <send_enable>

0000019a <.LVL14>:

	// Toggle latchclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
	// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
	// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
	PORT_LCHCLK |= (1 << LCHCLK_BIT);
 19a:	a5 9a       	sbi	0x14, 5	; 20

0000019c <.Loc.47>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 19c:	a5 98       	cbi	0x14, 5	; 20

0000019e <.Loc.49>:
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <display_getal>:

void display_getal(unsigned int getal)
{
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	c8 2f       	mov	r28, r24
 1ae:	d9 2f       	mov	r29, r25

000001b0 <.LBB15>:
	for (int i = 0; i < 4; i++)
 1b0:	00 e0       	ldi	r16, 0x00	; 0
 1b2:	10 e0       	ldi	r17, 0x00	; 0

000001b4 <.L11>:
	{
		display(segmentcodes[getal%10], i);
 1b4:	9e 01       	movw	r18, r28
 1b6:	ad ec       	ldi	r26, 0xCD	; 205
 1b8:	bc ec       	ldi	r27, 0xCC	; 204
 1ba:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__umulhisi3>
 1be:	9c 01       	movw	r18, r24
 1c0:	36 95       	lsr	r19
 1c2:	27 95       	ror	r18
 1c4:	36 95       	lsr	r19
 1c6:	27 95       	ror	r18
 1c8:	36 95       	lsr	r19
 1ca:	27 95       	ror	r18
 1cc:	c9 01       	movw	r24, r18
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	82 0f       	add	r24, r18
 1d8:	93 1f       	adc	r25, r19
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	fe 01       	movw	r30, r28
 1e0:	e8 1b       	sub	r30, r24
 1e2:	f9 0b       	sbc	r31, r25

000001e4 <.Loc.58>:
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	e0 50       	subi	r30, 0x00	; 0
 1ea:	fe 4f       	sbci	r31, 0xFE	; 254

000001ec <.Loc.59>:
 1ec:	b8 01       	movw	r22, r16
 1ee:	80 81       	ld	r24, Z
 1f0:	0e 94 c3 00 	call	0x186	; 0x186 <display>

000001f4 <.LVL18>:
		getal /= 10;
 1f4:	9e 01       	movw	r18, r28
 1f6:	ad ec       	ldi	r26, 0xCD	; 205
 1f8:	bc ec       	ldi	r27, 0xCC	; 204
 1fa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__umulhisi3>
 1fe:	ec 01       	movw	r28, r24

00000200 <.Loc.62>:
 200:	d6 95       	lsr	r29
 202:	c7 95       	ror	r28
 204:	d6 95       	lsr	r29
 206:	c7 95       	ror	r28
 208:	d6 95       	lsr	r29
 20a:	c7 95       	ror	r28

0000020c <.LBB16>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	8f e9       	ldi	r24, 0x9F	; 159
 20e:	9f e0       	ldi	r25, 0x0F	; 15

00000210 <.L1^B2>:
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <.L1^B2>
 214:	00 c0       	rjmp	.+0      	; 0x216 <L0^A>

00000216 <L0^A>:
	...

00000218 <.LBE16>:
	for (int i = 0; i < 4; i++)
 218:	0f 5f       	subi	r16, 0xFF	; 255
 21a:	1f 4f       	sbci	r17, 0xFF	; 255

0000021c <.Loc.73>:
 21c:	04 30       	cpi	r16, 0x04	; 4
 21e:	11 05       	cpc	r17, r1
 220:	49 f6       	brne	.-110    	; 0x1b4 <.L11>

00000222 <.LBE15>:
		_delay_ms(1);   // 1 kHz
	}
	display(0xFF,0);
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	0e 94 c3 00 	call	0x186	; 0x186 <display>

0000022c <.LVL23>:
}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28

00000230 <.Loc.76>:
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16

00000234 <.Loc.77>:
 234:	08 95       	ret

00000236 <main>:

int main(void)
{
    init();
 236:	0e 94 8d 00 	call	0x11a	; 0x11a <init>

0000023a <.LVL26>:
    int getal=99;
    int buttonpin=0;
    int teller=0;
 23a:	00 e0       	ldi	r16, 0x00	; 0
 23c:	10 e0       	ldi	r17, 0x00	; 0

0000023e <.Loc.84>:
    int buttonpin=0;
 23e:	c0 e0       	ldi	r28, 0x00	; 0
 240:	d0 e0       	ldi	r29, 0x00	; 0

00000242 <.Loc.85>:
    while(1)
    {
        display_getal(getal+teller*100);
 242:	0f 2e       	mov	r0, r31
 244:	f4 e6       	ldi	r31, 0x64	; 100
 246:	ff 2e       	mov	r15, r31
 248:	f0 2d       	mov	r31, r0

0000024a <.Loc.86>:
        }
        else
        {_delay_ms(20);
        if((PINF &(1<<PF1))!=0)
           {
             buttonpin=0;
 24a:	d1 2c       	mov	r13, r1
 24c:	e1 2c       	mov	r14, r1

0000024e <.Loc.87>:
                    buttonpin=1;
 24e:	bb 24       	eor	r11, r11
 250:	b3 94       	inc	r11
 252:	c1 2c       	mov	r12, r1
 254:	0d c0       	rjmp	.+26     	; 0x270 <.L14>

00000256 <.L15>:
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	99 ef       	ldi	r25, 0xF9	; 249
 25a:	20 e0       	ldi	r18, 0x00	; 0

0000025c <.L1^B3>:
 25c:	81 50       	subi	r24, 0x01	; 1
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	20 40       	sbci	r18, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <.L1^B3>
 264:	00 c0       	rjmp	.+0      	; 0x266 <L0^A>

00000266 <L0^A>:
	...

00000268 <.LBE18>:
        if((PINF &(1<<PF1))!=0)
 268:	79 9b       	sbis	0x0f, 1	; 15
 26a:	02 c0       	rjmp	.+4      	; 0x270 <.L14>

0000026c <.Loc.99>:
             buttonpin=0;
 26c:	cd 2d       	mov	r28, r13

0000026e <.Loc.100>:
 26e:	de 2d       	mov	r29, r14

00000270 <.L14>:
        display_getal(getal+teller*100);
 270:	f0 9e       	mul	r15, r16
 272:	c0 01       	movw	r24, r0
 274:	f1 9e       	mul	r15, r17
 276:	90 0d       	add	r25, r0
 278:	11 24       	eor	r1, r1

0000027a <.Loc.104>:
 27a:	8d 59       	subi	r24, 0x9D	; 157
 27c:	9f 4f       	sbci	r25, 0xFF	; 255
 27e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <display_getal>

00000282 <.LVL31>:
        if((PINF &(1<<PF1))==0)
 282:	79 99       	sbic	0x0f, 1	; 15
 284:	e8 cf       	rjmp	.-48     	; 0x256 <.L15>

00000286 <.LBB20>:
 286:	9f ef       	ldi	r25, 0xFF	; 255
 288:	29 ef       	ldi	r18, 0xF9	; 249
 28a:	80 e0       	ldi	r24, 0x00	; 0

0000028c <.L1^B4>:
 28c:	91 50       	subi	r25, 0x01	; 1
 28e:	20 40       	sbci	r18, 0x00	; 0
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <.L1^B4>
 294:	00 c0       	rjmp	.+0      	; 0x296 <L0^A>

00000296 <L0^A>:
	...

00000298 <.LBE20>:
             if((PINF &(1<<PF1))==0)
 298:	79 99       	sbic	0x0f, 1	; 15
 29a:	ea cf       	rjmp	.-44     	; 0x270 <.L14>

0000029c <.Loc.118>:
                    if(!buttonpin)
 29c:	20 97       	sbiw	r28, 0x00	; 0
 29e:	41 f7       	brne	.-48     	; 0x270 <.L14>

000002a0 <.Loc.120>:
                    teller++;
 2a0:	0f 5f       	subi	r16, 0xFF	; 255
 2a2:	1f 4f       	sbci	r17, 0xFF	; 255

000002a4 <.LBI22>:
 2a4:	9f ef       	ldi	r25, 0xFF	; 255
 2a6:	29 ef       	ldi	r18, 0xF9	; 249
 2a8:	80 e0       	ldi	r24, 0x00	; 0

000002aa <.L1^B5>:
 2aa:	91 50       	subi	r25, 0x01	; 1
 2ac:	20 40       	sbci	r18, 0x00	; 0
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <.L1^B5>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <L0^A>

000002b4 <L0^A>:
	...

000002b6 <.Loc.131>:
                    buttonpin=1;
 2b6:	cb 2d       	mov	r28, r11
 2b8:	dc 2d       	mov	r29, r12

000002ba <.Loc.132>:
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
 2ba:	da cf       	rjmp	.-76     	; 0x270 <.L14>

000002bc <__umulhisi3>:
 2bc:	a2 9f       	mul	r26, r18

000002be <.Loc.1>:
 2be:	b0 01       	movw	r22, r0

000002c0 <.Loc.2>:
 2c0:	b3 9f       	mul	r27, r19

000002c2 <.Loc.3>:
 2c2:	c0 01       	movw	r24, r0

000002c4 <.Loc.4>:
 2c4:	a3 9f       	mul	r26, r19

000002c6 <.Loc.5>:
 2c6:	70 0d       	add	r23, r0

000002c8 <.Loc.6>:
 2c8:	81 1d       	adc	r24, r1

000002ca <.Loc.7>:
 2ca:	11 24       	eor	r1, r1

000002cc <.Loc.8>:
 2cc:	91 1d       	adc	r25, r1

000002ce <.Loc.9>:
 2ce:	b2 9f       	mul	r27, r18

000002d0 <.Loc.10>:
 2d0:	70 0d       	add	r23, r0

000002d2 <.Loc.11>:
 2d2:	81 1d       	adc	r24, r1

000002d4 <.Loc.12>:
 2d4:	11 24       	eor	r1, r1

000002d6 <.Loc.13>:
 2d6:	91 1d       	adc	r25, r1

000002d8 <.Loc.14>:
 2d8:	08 95       	ret

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
